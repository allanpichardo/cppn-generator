/**
 * CPPN shader auto-generated by MHz
 */


float4 cppn(float2 texCoord, float z[1]) {

	// ---Layer 0---
	const float inputs0[3] = {texCoord.x, texCoord.y, z[0]};
	const float weights0[3][3] = {
			{0.363649845123291, 0.5355619192123413, 0.43983376026153564},
			{0.1445988416671753, -0.3621528148651123, 0.14263266324996948},
			{0.11708271503448486, -0.32208338379859924, -0.36337944865226746}
	};
	const float bias0[3] = {0.40361106395721436, 0.4095624089241028, 0.46940791606903076};

	// ---Layer 1---
	float inputs1[3] = {
		inputs0[0]*weights0[0][0] + inputs0[0]*weights0[0][1] + inputs0[0]*weights0[0][2], 
		inputs0[1]*weights0[1][0] + inputs0[1]*weights0[1][1] + inputs0[1]*weights0[1][2], 
		inputs0[2]*weights0[2][0] + inputs0[2]*weights0[2][1] + inputs0[2]*weights0[2][2]
	};
	inputs1[0] = tanh(inputs1[0] + bias0[0]);
	inputs1[1] = tanh(inputs1[1] + bias0[1]);
	inputs1[2] = tanh(inputs1[2] + bias0[2]);
	const float weights1[3][3] = {
			{-0.29750731587409973, 0.1332181692123413, 0.5672096014022827},
			{-0.03144282102584839, 0.5187184810638428, 0.5229092836380005},
			{0.38977813720703125, 0.4696180820465088, -0.21947526931762695}
	};
	const float bias1[3] = {0.5719103813171387, -0.2652764618396759, 0.1329445242881775};

	// ---Layer 2---
	float inputs2[3] = {
		inputs1[0]*weights1[0][0] + inputs1[0]*weights1[0][1] + inputs1[0]*weights1[0][2], 
		inputs1[1]*weights1[1][0] + inputs1[1]*weights1[1][1] + inputs1[1]*weights1[1][2], 
		inputs1[2]*weights1[2][0] + inputs1[2]*weights1[2][1] + inputs1[2]*weights1[2][2]
	};
	inputs2[0] = tanh(inputs2[0] + bias1[0]);
	inputs2[1] = tanh(inputs2[1] + bias1[1]);
	inputs2[2] = tanh(inputs2[2] + bias1[2]);
	const float weights2[3][3] = {
			{0.1556558609008789, 0.534656286239624, -0.02947777509689331},
			{-0.38935357332229614, 0.3325979709625244, -0.0353434681892395},
			{-0.4626712501049042, 0.18039476871490479, 0.15346574783325195}
	};
	const float bias2[3] = {0.256252646446228, -0.4586292803287506, 0.4129868745803833};

	// ---Layer 3---
	float inputs3[3] = {
		inputs2[0]*weights2[0][0] + inputs2[0]*weights2[0][1] + inputs2[0]*weights2[0][2], 
		inputs2[1]*weights2[1][0] + inputs2[1]*weights2[1][1] + inputs2[1]*weights2[1][2], 
		inputs2[2]*weights2[2][0] + inputs2[2]*weights2[2][1] + inputs2[2]*weights2[2][2]
	};
	inputs3[0] = tanh(inputs3[0] + bias2[0]);
	inputs3[1] = tanh(inputs3[1] + bias2[1]);
	inputs3[2] = tanh(inputs3[2] + bias2[2]);
	const float weights3[3][3] = {
			{-0.04932141304016113, -0.3090457022190094, -0.3570125997066498},
			{-0.35276496410369873, 0.18029439449310303, -0.27653437852859497},
			{-0.30290451645851135, -0.024691402912139893, 0.08705586194992065}
	};
	const float bias3[3] = {-0.5170513987541199, 0.2354944944381714, -0.16571077704429626};

	// ---Layer 4---
	float inputs4[3] = {
		inputs3[0]*weights3[0][0] + inputs3[0]*weights3[0][1] + inputs3[0]*weights3[0][2], 
		inputs3[1]*weights3[1][0] + inputs3[1]*weights3[1][1] + inputs3[1]*weights3[1][2], 
		inputs3[2]*weights3[2][0] + inputs3[2]*weights3[2][1] + inputs3[2]*weights3[2][2]
	};
	inputs4[0] = tanh(inputs4[0] + bias3[0]);
	inputs4[1] = tanh(inputs4[1] + bias3[1]);
	inputs4[2] = tanh(inputs4[2] + bias3[2]);
	const float weights4[3][3] = {
			{-0.5573211312294006, 0.5659394264221191, 0.5115188360214233},
			{-0.43335556983947754, 0.30628496408462524, 0.06324714422225952},
			{-0.08852118253707886, -0.2589467763900757, 0.2922140955924988}
	};
	const float bias4[3] = {-0.23105937242507935, -0.5257568359375, -0.14192309975624084};

	// ---Layer 5---
	float inputs5[3] = {
		inputs4[0]*weights4[0][0] + inputs4[0]*weights4[0][1] + inputs4[0]*weights4[0][2], 
		inputs4[1]*weights4[1][0] + inputs4[1]*weights4[1][1] + inputs4[1]*weights4[1][2], 
		inputs4[2]*weights4[2][0] + inputs4[2]*weights4[2][1] + inputs4[2]*weights4[2][2]
	};
	inputs5[0] = tanh(inputs5[0] + bias4[0]);
	inputs5[1] = tanh(inputs5[1] + bias4[1]);
	inputs5[2] = tanh(inputs5[2] + bias4[2]);
	const float weights5[3][3] = {
			{0.318183958530426, -0.37623971700668335, 0.34440863132476807},
			{0.1313018798828125, -0.4843684434890747, 0.16697263717651367},
			{-0.4940358102321625, -0.27959662675857544, 0.3833538293838501}
	};
	const float bias5[3] = {-0.23235169053077698, 0.41398704051971436, 0.5253684520721436};

	// ---Layer 6---
	float inputs6[3] = {
		inputs5[0]*weights5[0][0] + inputs5[0]*weights5[0][1] + inputs5[0]*weights5[0][2], 
		inputs5[1]*weights5[1][0] + inputs5[1]*weights5[1][1] + inputs5[1]*weights5[1][2], 
		inputs5[2]*weights5[2][0] + inputs5[2]*weights5[2][1] + inputs5[2]*weights5[2][2]
	};
	inputs6[0] = tanh(inputs6[0] + bias5[0]);
	inputs6[1] = tanh(inputs6[1] + bias5[1]);
	inputs6[2] = tanh(inputs6[2] + bias5[2]);
	const float weights6[3][3] = {
			{0.41316938400268555, 0.08344310522079468, -0.295061320066452},
			{0.5097287893295288, 0.21647900342941284, 0.17958968877792358},
			{-0.46390992403030396, -0.17060208320617676, 0.4728356599807739}
	};
	const float bias6[3] = {0.38868629932403564, 0.30229824781417847, -0.25218501687049866};

	// ---Layer 7---
	float inputs7[3] = {
		inputs6[0]*weights6[0][0] + inputs6[0]*weights6[0][1] + inputs6[0]*weights6[0][2], 
		inputs6[1]*weights6[1][0] + inputs6[1]*weights6[1][1] + inputs6[1]*weights6[1][2], 
		inputs6[2]*weights6[2][0] + inputs6[2]*weights6[2][1] + inputs6[2]*weights6[2][2]
	};
	inputs7[0] = tanh(inputs7[0] + bias6[0]);
	inputs7[1] = tanh(inputs7[1] + bias6[1]);
	inputs7[2] = tanh(inputs7[2] + bias6[2]);
	const float weights7[3][3] = {
			{-0.06024646759033203, -0.5772283673286438, -0.18668141961097717},
			{0.3017966151237488, -0.4367668628692627, -0.2611601948738098},
			{-0.2595905661582947, 0.27905505895614624, 0.41078054904937744}
	};
	const float bias7[3] = {-0.2088015377521515, -0.23500210046768188, -0.3649248480796814};

	// ---Layer 8---
	float inputs8[3] = {
		inputs7[0]*weights7[0][0] + inputs7[0]*weights7[0][1] + inputs7[0]*weights7[0][2], 
		inputs7[1]*weights7[1][0] + inputs7[1]*weights7[1][1] + inputs7[1]*weights7[1][2], 
		inputs7[2]*weights7[2][0] + inputs7[2]*weights7[2][1] + inputs7[2]*weights7[2][2]
	};
	inputs8[0] = smoothstep(0.0, 1.0, inputs8[0] + bias7[0]);
	inputs8[1] = smoothstep(0.0, 1.0, inputs8[1] + bias7[1]);
	inputs8[2] = smoothstep(0.0, 1.0, inputs8[2] + bias7[2]);

	return float4(inputs8[0], inputs8[1], inputs8[2], 1.0);
}